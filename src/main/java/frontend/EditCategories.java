/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;
import backend.ProductManagement;
import backend.Category;
import backend.InventoryComponent;
import com.formdev.flatlaf.*;
import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import backend.Subcategory;
import java.awt.event.FocusEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Caret;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/**
 *
 * @author mrswi
 */
public class EditCategories extends javax.swing.JFrame {
    
    private String catType = "Category";
    private String catName = "Name";
    private boolean firstRun = true;
    private ProductManagement productManagement;
    private int selectedCatIndex = -1; 
    private int selectedSubcatIndex = -1;
    
    /**
     * Creates new form AddCategories
     */
    public EditCategories() {
        initComponents();
    }
    public EditCategories(String type, ProductManagement mainClass, int categorySelected) {
        catType = type;
        selectedCatIndex = categorySelected;
        productManagement = mainClass;
        catName = ((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]).getName();
        initComponents();
    }
    
    public EditCategories(String type, ProductManagement mainClass, int categorySelected, int subcatSelected) {
        selectedCatIndex = categorySelected;
        selectedSubcatIndex = subcatSelected;
        catType = type;
        productManagement = mainClass;
        catName = ((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]).getComponents().get(selectedSubcatIndex).getName();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        internalFrameEditCats = new javax.swing.JInternalFrame();
        textFieldEditCatsHeader = new javax.swing.JTextField();
        buttonEditCat = new javax.swing.JButton();
        buttonCancelEditCat = new javax.swing.JButton();
        formattedTextFieldCatName = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(480, 300));

        internalFrameEditCats.setBorder(null);
        internalFrameEditCats.setClosable(true);
        internalFrameEditCats.setTitle("Edit " + catType);
        internalFrameEditCats.setFrameIcon(null);
        internalFrameEditCats.setMaximumSize(new java.awt.Dimension(480, 300));
        internalFrameEditCats.setOpaque(true);
        internalFrameEditCats.setPreferredSize(new java.awt.Dimension(480, 300));
        internalFrameEditCats.setVisible(true);
        internalFrameEditCats.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                internalFrameEditCatsInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        textFieldEditCatsHeader.setEditable(false);
        textFieldEditCatsHeader.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        textFieldEditCatsHeader.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldEditCatsHeader.setText("Edit " + catType);
        textFieldEditCatsHeader.setBorder(null);
        textFieldEditCatsHeader.setFocusable(false);
        textFieldEditCatsHeader.setName("popupTitle"); // NOI18N

        buttonEditCat.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonEditCat.setText("Save");
        buttonEditCat.setBorderPainted(false);
        buttonEditCat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonEditCat.setFocusPainted(false);
        buttonEditCat.setFocusable(false);
        buttonEditCat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonEditCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditCatActionPerformed(evt);
            }
        });

        buttonCancelEditCat.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonCancelEditCat.setText("Cancel");
        buttonCancelEditCat.setBorderPainted(false);
        buttonCancelEditCat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonCancelEditCat.setFocusPainted(false);
        buttonCancelEditCat.setFocusable(false);
        buttonCancelEditCat.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonCancelEditCat.setPreferredSize(new java.awt.Dimension(85, 32));
        buttonCancelEditCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelEditCatActionPerformed(evt);
            }
        });

        //if (catType.equals("Category")) {
            //    formattedTextFieldCatName.setText(((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]).getName());
            //} else {
            //    formattedTextFieldCatName.setText(((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]).getComponents().get(selectedSubcatIndex).getName());
            //}
        formattedTextFieldCatName.setBorder(null);
        formattedTextFieldCatName.setForeground(new java.awt.Color(120, 120, 120));
        formattedTextFieldCatName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        formattedTextFieldCatName.setText(catName);
        //formattedTextFieldCatName.selectAll();
        //formattedTextFieldCatName.setSelectionStart(0);
        //formattedTextFieldCatName.setSelectionEnd(0);
        //formattedTextFieldCatName.setCaretPosition(8);
        formattedTextFieldCatName.setToolTipText("");
        formattedTextFieldCatName.setActionCommand("<Not Set>");
        formattedTextFieldCatName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        formattedTextFieldCatName.setDisabledTextColor(new java.awt.Color(120, 120, 120));
        formattedTextFieldCatName.setFocusLostBehavior(javax.swing.JFormattedTextField.REVERT);
        formattedTextFieldCatName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        formattedTextFieldCatName.setMargin(new java.awt.Insets(6, 6, 6, 6));
        formattedTextFieldCatName.setName(""); // NOI18N
        formattedTextFieldCatName.setOpaque(true);
        formattedTextFieldCatName.setSelectedTextColor(new java.awt.Color(140, 140, 140));
        formattedTextFieldCatName.setSelectionColor(new java.awt.Color(61, 100, 100));
        formattedTextFieldCatName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formattedTextFieldCatNameMousePressed(evt);
            }
        });
        formattedTextFieldCatName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formattedTextFieldCatNameKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout internalFrameEditCatsLayout = new javax.swing.GroupLayout(internalFrameEditCats.getContentPane());
        internalFrameEditCats.getContentPane().setLayout(internalFrameEditCatsLayout);
        internalFrameEditCatsLayout.setHorizontalGroup(
            internalFrameEditCatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textFieldEditCatsHeader, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(internalFrameEditCatsLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(buttonEditCat, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(buttonCancelEditCat, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, internalFrameEditCatsLayout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(formattedTextFieldCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        internalFrameEditCatsLayout.setVerticalGroup(
            internalFrameEditCatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(internalFrameEditCatsLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(textFieldEditCatsHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(formattedTextFieldCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(internalFrameEditCatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancelEditCat, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEditCat, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        //formattedTextFieldCatName.setSelectionStart(3);
        //formattedTextFieldCatName.setSelectionEnd(3);
        ////formattedTextFieldCatName.setCaretPosition(catName.length() - 1);
        //formattedTextFieldCatName.moveCaretPosition(catName.length());
        ////formattedTextFieldCatName.setText(catName);
        //formattedTextFieldCatName.setSelectionStart(catName.length());
        //formattedTextFieldCatName.select(7,8);
        //DefaultCaret caret = new DefaultCaret();
        //caret.setSelectionVisible(false);
        //formattedTextFieldCatName.setCaret(caret);
        //formattedTextFieldCatName.setCaretPosition(8);
        //formattedTextFieldCatName.replaceSelection(catName);
        //formattedTextFieldCatName.setCaret(new DefaultCaret());
        //formattedTextFieldCatName.moveCaretPosition(8);
        //formattedTextFieldCatName.setText("Hello");
        //formattedTextFieldCatName.getCaret().setDot(8);
        //formattedTextFieldCatName.setCaret(formattedTextFieldCatName.getCaret().setSelectionVisible(false));
        //formattedTextFieldCatName.setCaret(formattedTextFieldCatName.getCaret().setDot(8));
        //Caret caret = formattedTextFieldCatName.getCaret();
        //caret.setDot(7);
        //caret.setSelectionVisible(false);
        //caret.setDot(8);
        //System.out.println(caret.getMark());
        //System.out.println(caret.getDot());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(internalFrameEditCats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(internalFrameEditCats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEditCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditCatActionPerformed
        // TODO add your handling code here:
        boolean duplicate = false;
        boolean added = false;
        if (formattedTextFieldCatName.getText().isBlank()) {
            new ErrorPopup("Please enter a <b>" + catType + " Name</b> for the new " + catType + ".").setVisible(true);
        } else {
            InventoryComponent selCat = ((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]);
            if(catType.equals("Category")){
//                for (InventoryComponent category : productManagement.getCategories().values()) {
//                    if (category.getName().equalsIgnoreCase(formattedTextFieldCatName.getText().trim()) && !category.getName().equals(catName)) {
//                        new ErrorPopup("Duplicate <b>" + catType + " Name</b> for the new " + catType + ". Please Enter a different name.").setVisible(true);
//                        duplicate = true;
//                        break;
//                    }
//                }
//                if(!duplicate){
//                    InventoryComponent newCategory = new Category(formattedTextFieldCatName.getText().trim());
//                    String filePath = "categoryData.csv";
//                    String newData = String.format("%s␟,␟%s", newCategory.getId(), newCategory.getName());
//                    //InventoryComponent newCategory = new Category(input);
//                    productManagement.addCat(newCategory);
//                    added = true;
//                    try {
//                        productManagement.writeDataToFile(newData, filePath);
//                    } catch (IOException ex) {
//                        Logger.getLogger(EditCategories.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                        
//                }
            }
            if(catType.equals("Subcategory")){
//                InventoryComponent selectedCategory = (Category) productManagement.getCategories().values().toArray()[selectedCatIndex];
//                for (InventoryComponent entry1 : selectedCategory.getComponents()) {
//                    if (entry1.getName().equalsIgnoreCase(formattedTextFieldCatName.getText().trim())) {
//                        new ErrorPopup("Duplicate <b>" + catType + " Name</b> for the new " + catType + ". Please Enter a new name").setVisible(true);
//                        duplicate = true;
//                        break;
//                    }
//                }
//                if(!duplicate){
//                    Subcategory newSubcategory = Subcategory.addSubcategory(formattedTextFieldCatName.getText().trim(),
//                           selectedCategory, productManagement.findMaxId(selectedCategory.getComponents(), 3, 6));
//                    String filePath = "subcategoryData.csv";
//                    String newData = String.format("%s␟,␟%s", newSubcategory.getId(), newSubcategory.getName());
//                    productManagement.addSubCat(newSubcategory);
//                    added = true;
//                    try {
//                        productManagement.writeDataToFile(newData, filePath);
//                    } catch (IOException ex) {
//                        Logger.getLogger(EditCategories.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                        
//                }
                
                // begin delete
                // Check if the subcategory exists
                for (InventoryComponent subcategory : selCat.getComponents()) {
                    if (subcategory.getName().equalsIgnoreCase(catName)) {
                        if (!subcategory.getComponents().isEmpty()) {
                            new ErrorPopup("The <b>selected subcategory contains products</b>. Please make sure the subcategory is empty.").setVisible(true);
                            super.dispose();
                        } else {
                            // Delete the subcategory from the CSV file
                            CategoriesGUI.setDeletePushed(true);
                            String filePath = "subcategoryData.csv";
                            selCat.getComponents().remove(subcategory);
                            
                            String dataToRemove = subcategory.getId() + "␟,␟" + subcategory.getName();
                            try {
                                productManagement.deleteDataFromFile(dataToRemove, filePath);
                            } catch (IOException ex) {
                                Logger.getLogger(DeleteObject.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            super.dispose();
                        }
                        break;
                    }
                }
                // end delete
                
                // begin re-add
                for (InventoryComponent entry1 : selCat.getComponents()) {
                    if (entry1.getName().equalsIgnoreCase(formattedTextFieldCatName.getText().trim())) {
                        new ErrorPopup("Duplicate <b>" + catType + " Name</b> for the " + catType + ". Please Enter a new name").setVisible(true);
                        duplicate = true;
                        break;
                    }
                }
                if(!duplicate){
                    Subcategory newSubcategory = Subcategory.addSubcategory(formattedTextFieldCatName.getText().trim(),
                           selCat, productManagement.findMaxId(selCat.getComponents(), 3, 6));
                    String filePath = "subcategoryData.csv";
                    String newData = String.format("%s␟,␟%s", newSubcategory.getId(), newSubcategory.getName());
                    productManagement.addSubCat(newSubcategory);
                    added = true;
                    try {
                        productManagement.writeDataToFile(newData, filePath);
                    } catch (IOException ex) {
                        Logger.getLogger(AddCategories.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                }
                
                
                // end re-add
                
            }
        }
        if(added){
            super.dispose();
        }
    }//GEN-LAST:event_buttonEditCatActionPerformed

    private void buttonCancelEditCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelEditCatActionPerformed
        super.dispose();
    }//GEN-LAST:event_buttonCancelEditCatActionPerformed

    private void internalFrameEditCatsInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_internalFrameEditCatsInternalFrameClosed
        super.dispose();
    }//GEN-LAST:event_internalFrameEditCatsInternalFrameClosed

    private void formattedTextFieldCatNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formattedTextFieldCatNameKeyTyped
        // TODO add your handling code here:
//        if (firstRun) {
//            if (evt.paramString().contains("Delete") || evt.paramString().contains("Backspace")){
//                formattedTextFieldCatName.setForeground(new Color(120,120,120));
//                formattedTextFieldCatName.setText(catType + " Name");
//                formattedTextFieldCatName.setCaretPosition(formattedTextFieldCatName.getText().length() / 2);
//                firstRun = true;
//            } else {
//                formattedTextFieldCatName.setForeground(Color.lightGray);
//                formattedTextFieldCatName.setText("");
//                firstRun = false;
//            }
//        } else if (formattedTextFieldCatName.getText().equals("")){
//            formattedTextFieldCatName.setForeground(new Color(120,120,120));
//            formattedTextFieldCatName.setText(catType + " Name");
//            formattedTextFieldCatName.setCaretPosition(formattedTextFieldCatName.getText().length() / 2);
//            firstRun = true;
//        }
//        System.out.println(selectedCatIndex + " / " + selectedSubcatIndex);
//        InventoryComponent cat = (Category) productManagement.getCategories().values().toArray()[selectedCatIndex];;
//        switch (catType) {
//            case "Subcategory":
//                InventoryComponent subcat = ((Category) productManagement.getCategories().values().toArray()[selectedCatIndex]).getComponents().get(selectedSubcatIndex);
//                if (!formattedTextFieldCatName.getText().equals(subcat.getName())){
//                        formattedTextFieldCatName.setForeground(Color.lightGray);
//                    }
//
//                if (evt.paramString().contains("Delete") || evt.paramString().contains("Backspace")) {
//                    if (formattedTextFieldCatName.getText().equals(subcat.getName())) {
//                        formattedTextFieldCatName.setForeground(new Color(155,155,155));
//                    }
//                } else {
//                    try {
//                        if (formattedTextFieldCatName.getText(
//                                0, formattedTextFieldCatName.getCaretPosition()
//                            ).concat(
//                                ("" + evt.getKeyChar()).concat(
//                                    formattedTextFieldCatName.getText(
//                                        formattedTextFieldCatName.getCaretPosition(), 
//                                        formattedTextFieldCatName.getText().length() - formattedTextFieldCatName.getCaretPosition()
//                                    )
//                                )
//                            ).equals(subcat.getName())
//                        ) {
//                            formattedTextFieldCatName.setForeground(new Color(155,155,155));
//                        } else formattedTextFieldCatName.setForeground(Color.lightGray);
//                    } catch (BadLocationException ex) {
//                        Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//                break;
//            case "Category":
//                if (!formattedTextFieldCatName.getText().equals(cat.getName())){
//                        formattedTextFieldCatName.setForeground(Color.lightGray);
//                    }
//
//                if (evt.paramString().contains("Delete") || evt.paramString().contains("Backspace")) {
//                    if (formattedTextFieldCatName.getText().equals(cat.getName())) {
//                        formattedTextFieldCatName.setForeground(new Color(155,155,155));
//                    }
//                } else {
//                    try {
//                        if (formattedTextFieldCatName.getText(
//                                0, formattedTextFieldCatName.getCaretPosition()
//                            ).concat(
//                                ("" + evt.getKeyChar()).concat(
//                                    formattedTextFieldCatName.getText(
//                                        formattedTextFieldCatName.getCaretPosition(), 
//                                        formattedTextFieldCatName.getText().length() - formattedTextFieldCatName.getCaretPosition()
//                                    )
//                                )
//                            ).equals(cat.getName())
//                        ) {
//                            formattedTextFieldCatName.setForeground(new Color(155,155,155));
//                        } else formattedTextFieldCatName.setForeground(Color.lightGray);
//                    } catch (BadLocationException ex) {
//                        Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//                break;
//            default:
//                System.out.println("No object type selected to edit. Exiting program...");
//                System.exit(0);
//        }
        
        if (!formattedTextFieldCatName.getText().equals(catName)){
                formattedTextFieldCatName.setForeground(Color.lightGray);
            }

        if (evt.paramString().contains("Delete") || evt.paramString().contains("Backspace")) {
            if (formattedTextFieldCatName.getText().equals(catName)) {
                formattedTextFieldCatName.setForeground(new Color(155,155,155));
            }
        } else {
            try {
                if (formattedTextFieldCatName.getText(
                        0, formattedTextFieldCatName.getCaretPosition()
                    ).concat(
                        ("" + evt.getKeyChar()).concat(
                            formattedTextFieldCatName.getText(
                                formattedTextFieldCatName.getCaretPosition(), 
                                formattedTextFieldCatName.getText().length() - formattedTextFieldCatName.getCaretPosition()
                            )
                        )
                    ).equals(catName)
                ) {
                    formattedTextFieldCatName.setForeground(new Color(155,155,155));
                } else formattedTextFieldCatName.setForeground(Color.lightGray);
            } catch (BadLocationException ex) {
                Logger.getLogger(EditProduct.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_formattedTextFieldCatNameKeyTyped

    private void formattedTextFieldCatNameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formattedTextFieldCatNameMousePressed
        // TODO add your handling code here:
//        DefaultCaret caret = new DefaultCaret();
//        caret.setSelectionVisible(false);
//        formattedTextFieldCatName.setCaret(caret);
//        formattedTextFieldCatName.setCaret(caret.);
//        formattedTextFieldCatName.getCaret().setDot(8);
//        Caret caret = formattedTextFieldCatName.getCaret();
//        caret.setDot(8);
//        formattedTextFieldCatName.setCaret(formattedTextFieldCatName.getCaret().setSelectionVisible(false));
//        formattedTextFieldCatName.setCaret(formattedTextFieldCatName.getCaret().setDot(8));
//        formattedTextFieldCatName.setCaret(formattedTextFieldCatName.getCaret());
    }//GEN-LAST:event_formattedTextFieldCatNameMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            javax.swing.UIManager.setLookAndFeel(new FlatDarkLaf());
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new EditCategories().setVisible(true);
                }
            });
        } catch (UnsupportedLookAndFeelException ex) {
             java.util.logging.Logger.getLogger(EditCategories.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancelEditCat;
    private javax.swing.JButton buttonEditCat;
    private javax.swing.JFormattedTextField formattedTextFieldCatName;
    private javax.swing.JInternalFrame internalFrameEditCats;
    private javax.swing.JTextField textFieldEditCatsHeader;
    // End of variables declaration//GEN-END:variables
    
    class HighlightCaret extends DefaultCaret {

        private static final Highlighter.HighlightPainter unfocusedPainter =
                new DefaultHighlighter.DefaultHighlightPainter(new Color(230, 230, 210));
        private static final long serialVersionUID = 1L;
        private boolean isFocused;
        

        @Override
        protected Highlighter.HighlightPainter getSelectionPainter() {
            return isFocused ? super.getSelectionPainter() : unfocusedPainter;
        }
        
//        @Override
//        public void focusGained(FocusEvent e) {
//            isFocused = true;
//            super.setBlinkRate(500);
//            super.focusGained(e);
//        }

        @Override
        public void setSelectionVisible(boolean hasFocus) {
            super.setBlinkRate(500);
            if (hasFocus != isFocused) {
                isFocused = hasFocus;
                super.setSelectionVisible(false);
                super.setSelectionVisible(true);
            }
        }
    }
}